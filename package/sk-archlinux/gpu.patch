diff --git a/include/modules/gpu.hpp b/include/modules/gpu.hpp
new file mode 100644
index 00000000..f637a776
--- /dev/null
+++ b/include/modules/gpu.hpp
@@ -0,0 +1,56 @@
+#pragma once
+
+#include <array>
+#include <cmath>
+#include "ALabel.hpp"
+#include "bar.hpp"
+#include "util/sleeper_thread.hpp"
+
+namespace waybar::modules {
+
+constexpr unsigned bits_needed(unsigned base, unsigned size) {
+  return std::ceil(size * std::log2(base));
+}
+
+template <unsigned base, unsigned size>
+class Ring {
+  // Make sure values fit in 64 bits, up to 20 values of base 9 fit.
+  static_assert(base >= 2 && base <= 255 && size >= 1 && bits_needed(base, size) <= 64,
+                "Ring<base, size> does not fit in storage");
+  using storage_t = uint64_t;
+  // Values are stored as: val[0] * base^0 + val[1] * base^1 + ... + val[size - 1] * base^(size - 1).
+  storage_t storage_;
+  const std::array<uint64_t, size> powers_;
+
+ public:
+  Ring();
+  using value_type = uint8_t;
+  void push(value_type value) {
+    storage_ = storage_ % powers_[size - 1] * base + value;
+  }
+
+  class iterator;
+  iterator begin() const { return iterator(size - 1, storage_, powers_); }
+  iterator end() const { return iterator(-1, storage_, powers_); }
+};
+
+class Gpu : public ALabel {
+ public:
+  Gpu(const std::string&, const Json::Value&);
+  ~Gpu() = default;
+  void update();
+
+ private:
+  int                  getBusyPercent();
+  int                  getTemperature();
+  float                getFanKiloRpms();
+
+  std::string          file_path_;
+  util::SleeperThread  thread_;
+  static constexpr int HISTORY_LEN = 6;
+  Ring<9, HISTORY_LEN> busy_history_;
+  Ring<9, HISTORY_LEN> temperature_history_;
+  Ring<9, HISTORY_LEN> fan_history_;
+};
+
+}  // namespace waybar::modules
diff --git a/meson.build b/meson.build
index 1a391630..1c7e9e5e 100644
--- a/meson.build
+++ b/meson.build
@@ -167,6 +167,7 @@ src_files = files(
     'src/modules/ddcutil.cpp',
     'src/modules/disk.cpp',
     'src/modules/gammastep.cpp',
+    'src/modules/gpu.cpp',
     'src/modules/idle_inhibitor.cpp',
     'src/modules/image.cpp',
     'src/modules/load.cpp',
diff --git a/resources/config.jsonc b/resources/config.jsonc
index 1294c2c4..05711870 100644
--- a/resources/config.jsonc
+++ b/resources/config.jsonc
@@ -19,6 +19,7 @@
         "mpd",
         "idle_inhibitor",
         "gammastep",
+        "gpu",
         "ddcutil",
         "pulseaudio",
         "network",
@@ -257,5 +258,9 @@
 			"suspend": "systemctl suspend",
 			"hibernate": "systemctl hibernate"
 		}
+    },
+    "gpu": {
+      "format": "G {busy_history}{busy}% {temperature_history}{temperature_c}°C {fan_history}{fan_krpms:.1f}k⟳",
+      "interval": 5
     }
 }
diff --git a/resources/style.css b/resources/style.css
index 77046ed3..2ee2877a 100644
--- a/resources/style.css
+++ b/resources/style.css
@@ -95,6 +95,7 @@ button:hover {
 #power-profiles-daemon,
 #gammastep,
 #ddcutil,
+#gpu,
 #mpd {
     padding: 0 10px;
     color: #ffffff;
@@ -288,6 +289,10 @@ label:focus {
     background-color: #f53c3c;
 }
 
+#gpu {
+    background: #720823;
+}
+
 #mpd {
     background-color: #66cc99;
     color: #2a5c45;
diff --git a/src/factory.cpp b/src/factory.cpp
index dffb704e..2f15986b 100644
--- a/src/factory.cpp
+++ b/src/factory.cpp
@@ -53,6 +53,7 @@
 #include "modules/idle_inhibitor.hpp"
 #include "modules/gammastep.hpp"
 #include "modules/ddcutil.hpp"
+#include "modules/gpu.hpp"
 #if defined(HAVE_MEMORY_LINUX) || defined(HAVE_MEMORY_BSD)
 #include "modules/memory.hpp"
 #endif
@@ -233,6 +234,9 @@ waybar::AModule* waybar::Factory::makeModule(const std::string& name,
     if (ref == "ddcutil") {
       return new waybar::modules::DdcUtil(id, bar_, config_[name]);
     }
+    if (ref == "gpu") {
+      return new waybar::modules::Gpu(id, config_[name]);
+    }
 #if defined(HAVE_MEMORY_LINUX) || defined(HAVE_MEMORY_BSD)
     if (ref == "memory") {
       return new waybar::modules::Memory(id, config_[name]);
diff --git a/src/modules/gpu.cpp b/src/modules/gpu.cpp
new file mode 100644
index 00000000..c616fa37
--- /dev/null
+++ b/src/modules/gpu.cpp
@@ -0,0 +1,168 @@
+#include <algorithm>
+#include <codecvt>
+#include <filesystem>
+#include <fstream>
+#include <iterator>
+#include <locale>
+#include <string>
+#include <fmt/format.h>
+#include "modules/gpu.hpp"
+
+namespace {
+
+template <unsigned size>
+std::array<uint64_t, size> make_powers(unsigned base) {
+  std::array<uint64_t, size> result;
+  uint64_t power = 1;
+  for (unsigned i = 0; i < size; ++i) {
+    result[i] = power;
+    power *= base;
+  }
+  return result;
+}
+
+// Normalize to an integer in range 0..8.
+uint8_t normalize(float x, float min, float max) {
+  if (min >= max) throw std::runtime_error("Should be min < max");
+  const float clamped = std::max(std::min(x, max), min);
+  const float normalized = (clamped - min) / (max - min);
+  return static_cast<uint8_t>(std::round(normalized * 8.0f));
+}
+
+const char16_t BLANK = u'⠀';
+const std::array<char16_t, 9> SPARK_CHARS = { u'⠀', u'▁', u'▂', u'▃', u'▄', u'▅', u'▆', u'▇', u'█'};
+
+template <typename T>
+std::string to_utf8(const std::basic_string<T, std::char_traits<T>, std::allocator<T>>& source) {
+  std::wstring_convert<std::codecvt_utf8_utf16<T>, T> converter;
+  return converter.to_bytes(source);
+}
+
+template <unsigned base, unsigned size>
+std::string spark(const waybar::modules::Ring<base, size>& ring) {
+  std::u16string result;
+  result.reserve(size);
+  bool all_empty = true;
+  for (const auto& value : ring) {
+    if (value != 0) all_empty = false;
+    result.push_back(SPARK_CHARS[value]);
+  }
+  return all_empty ? "" : to_utf8(result);
+}
+
+}
+
+template <unsigned base, unsigned size>
+waybar::modules::Ring<base, size>::Ring() : storage_(0), powers_(make_powers<size>(base)) {}
+
+template <unsigned base, unsigned size>
+class waybar::modules::Ring<base, size>::iterator {
+ public:
+  using iterator_category = std::forward_iterator_tag;
+  using value_type = waybar::modules::Ring<base, size>::value_type;
+  using difference_type = long;
+  using pointer = const uint8_t*;
+  using reference = const uint8_t&;
+
+  iterator(int idx, const waybar::modules::Ring<base, size>::storage_t& storage, const std::array<uint64_t, size>& powers)
+    : idx_(idx), storage_(storage), powers_(powers) {}
+  iterator& operator++() { --idx_; return *this; }
+  iterator operator++(int) { iterator result = *this; ++(*this); return result; }
+  bool operator==(iterator other) const { return idx_ == other.idx_; }
+  bool operator!=(iterator other) const { return !(*this == other); }
+  value_type operator*() const {
+    const unsigned int divisor = powers_[idx_];
+    return (storage_ / divisor) % base;
+  }
+ private:
+  int idx_;
+  const waybar::modules::Ring<base, size>::storage_t& storage_;
+  const std::array<uint64_t, size>& powers_;
+};
+
+waybar::modules::Gpu::Gpu(const std::string& id, const Json::Value& config)
+    : ALabel(config, "gpu", id, "G {}", 5) {
+  if (config_["hwmon-path"].isString()) {
+    file_path_ = config_["hwmon-path"].asString();
+  } else {
+    file_path_ = "/sys/class/drm/card0/device/hwmon/hwmon1";
+  }
+  std::ifstream hwmon(file_path_);
+  if (!hwmon.is_open()) {
+    throw std::runtime_error("Can't open " + file_path_);
+  }
+  thread_ = [this] {
+    dp.emit();
+    thread_.sleep_for(interval_);
+  };
+}
+
+auto waybar::modules::Gpu::update() -> void {
+  int busy_percent = getBusyPercent();
+  busy_history_.push(normalize(busy_percent, 0.0, 100.0));
+  int temperature_c = getTemperature();
+  temperature_history_.push(normalize(temperature_c, 40.0, 90.0));
+  float fan_krpms = getFanKiloRpms();
+  fan_history_.push(normalize(fan_krpms, 0.3, 2.4));
+  label_.set_markup(fmt::format(fmt::runtime(format_),
+                    fmt::arg("busy", busy_percent),
+                    fmt::arg("busy_history", spark(busy_history_)),
+                    fmt::arg("temperature_c", temperature_c),
+                    fmt::arg("temperature_history", spark(temperature_history_)),
+                    fmt::arg("fan_krpms", fan_krpms),
+                    fmt::arg("fan_history", spark(fan_history_))));
+  if (tooltipEnabled()) {
+    std::string tooltip_format = "{busy}% {temperature_c}°C {fan_krpms:.1f}k";
+    if (config_["tooltip-format"].isString()) {
+      tooltip_format = config_["tooltip-format"].asString();
+    }
+    label_.set_tooltip_text(fmt::format(fmt::runtime(tooltip_format),
+                            fmt::arg("busy", busy_percent),
+                            fmt::arg("temperature_c", temperature_c),
+                            fmt::arg("fan_krpms", fan_krpms)));
+  }
+  // Call parent update
+  ALabel::update();
+}
+
+auto waybar::modules::Gpu::getBusyPercent() -> int {
+  std::ifstream f(file_path_ + "/device/gpu_busy_percent");
+  if (!f.is_open()) {
+    throw std::runtime_error("Can't open " + file_path_ + "/device/gpu_busy_percent");
+  }
+  std::string line;
+  if (f.good()) {
+    getline(f, line);
+  }
+  f.close();
+  int busy_percent = std::strtol(line.c_str(), nullptr, 10);
+  return busy_percent;
+}
+
+auto waybar::modules::Gpu::getTemperature() -> int {
+  std::ifstream f(file_path_ + "/temp1_input");
+  if (!f.is_open()) {
+    throw std::runtime_error("Can't open " + file_path_ + "/temp1_input");
+  }
+  std::string line;
+  if (f.good()) {
+    getline(f, line);
+  }
+  f.close();
+  int temperature_c = std::strtol(line.c_str(), nullptr, 10) / 1000;
+  return temperature_c;
+}
+
+auto waybar::modules::Gpu::getFanKiloRpms() -> float {
+  std::ifstream f(file_path_ + "/fan1_input");
+  if (!f.is_open()) {
+    throw std::runtime_error("Can't open " + file_path_ + "/fan1_input");
+  }
+  std::string line;
+  if (f.good()) {
+    getline(f, line);
+  }
+  f.close();
+  int fan_rpms = std::strtol(line.c_str(), nullptr, 10);
+  return fan_rpms / 1000.0;
+}
